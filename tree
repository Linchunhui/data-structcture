class Node:
    def __init__(self,val=None,left=None,right=None):
        self.val=val
        self.left=left
        self.right=right

def tree():
    node1 = Node(val=1)
    node2 = Node(val=2)
    node3 = Node(val=3)
    node4 = Node(val=4)
    node5 = Node(val=5)
    node6 = Node(val=6)
    node7 = Node(val=7)
    node1.left=node2
    node1.right=node3
    node2.left=node4
    node2.right=node5
    node3.left=node6
    node3.right=node7
    return node1
#深度优先一般递归，广度优先一般队列
def pre(root):
    if root==None:
        return
    #list=[]
    #list.append(root.val)
    print(root.val)
    pre(root.left)
    pre(root.right)
    #return list
def mid(root):
    if root==None:
        return
    mid(root.left)
    print(root.val)
    mid(root.right)
def back(root):
    if root==None:
        return
    back(root.left)
    back(root.right)
    print(root.val)
def level(root):
    if root==None:
        return
    queue=[]
    node=root
    queue.append(node)
    while queue:
        node=queue.pop(0)
        print(node.val)
        if node.left:
            queue.append(node.left)
        if node.right:
            queue.append(node.right)
def pre1(root):
    if root==None:
        return
    stack=[]
    node=root
    while node or stack:
        while node:
            print(node.val)
            stack.append(node)           #保存最左边左节点
            node=node.left              #向左遍历，
        node=stack.pop()                #左节点为空时，出栈向右边递归
        node=node.right                 #左孩子没了就指向右孩子

def mid1(root):
    if root==None:
        return
    stack=[]
    node=root
    while node or stack:
        while node:
            stack.append(node)      #先一直保存左节点
            node=node.left
        node=stack.pop()             #到左节点空了开始出栈
        print(node.val)             #先打印左节点，再根节点，再右节点
        node=node.right

def back1(root):
    if root==None:
        return
    stack1=[]
    stack2=[]
    node=root
    stack1.append(node)
    while stack1:
        node=stack1.pop()
        if node.left:
            stack1.append(node.left)
        if node.right:
            stack1.append(node.right)
        stack2.append(node)
    while stack2:
        print(stack2.pop().val)

if __name__=="__main__":
    root=tree()
    #mid(root)
    #back(root)
    back1(root)
